# Generated by Django 4.1.2 on 2022-11-18 22:13

from django.db import migrations

def insert_initial_user(apps, schema_editor):
    RegisteredUser = apps.get_model('main_app', 'RegisteredUser')

    from django.contrib.auth.hashers import make_password
    test_user = RegisteredUser(
        first_name = "FirstName",
        last_name = "LastName",
        email = "test@test.com",
        password = make_password("123456")
    )
    test_user2 = RegisteredUser(
        first_name = "Jan",
        last_name = "Novak",
        email = "test2@test.com",
        password = make_password("123456")
    )
    try:
        test_user.save()
        test_user2.save()
    except Exception as e:
        print(e)

def insert_initial_tournament_types(apps, schema_editor):
    TournamentType = apps.get_model('main_app', 'TournamentType')
    # Typy turnajů
    t_types = [
        TournamentType(type = "Chess"),
        TournamentType(type = "Table tennis"),
        TournamentType(type = "Table football"),
        TournamentType(type = "Darts")
    ]
    try:
        for t_type in t_types:
            t_type.save()
    except Exception as e:
        print(e)

def insert_initial_tournament(apps, schema_editor):
    Tournament = apps.get_model('main_app', 'Tournament')
    TournamentType = apps.get_model('main_app', 'TournamentType')

    from datetime import datetime
    t1 = Tournament(
        name = "Testing tournament",
        description = "This is a test",
        date = datetime.now(),
        prize = "10,- Kč",
        capacity = 8,
        type = TournamentType.objects.all()[0],
        state = 1,
        minimum_team_size = 1,
        maximum_team_size = 5
    )
    t2 = Tournament(
        name = "Testing tournament (2)",
        description = "This is an another test",
        date = datetime.now(),
        prize = "Beer",
        capacity = 32,
        type = TournamentType.objects.all()[1],
        state = 0,
        minimum_team_size = 1,
        maximum_team_size = 1
    )
    try:
        t1.save()
        t2.save()
    except Exception as e:
        print(e)

def insert_initial_tournament_data(apps, schema_editor):
    UserTournamentModerator = apps.get_model('main_app', 'UserTournamentModerator')
    Team = apps.get_model('main_app', 'Team')
    Tournament = apps.get_model('main_app', 'Tournament')
    RegisteredUser = apps.get_model('main_app', 'RegisteredUser')

    users = RegisteredUser.objects.all()
    tournaments = Tournament.objects.all()

    mod = [
        UserTournamentModerator(
            user = users[0],
            tournament = tournaments[0]
        ),
        UserTournamentModerator(
            user = users[0],
            tournament = tournaments[1]
        )
    ]
    mod[0].save()
    mod[1].save()

    team = Team(
        name = "Test team",
        owner = users[1],
        tournament = tournaments[0]
    )
    team.save()

# Pokračování předchozí fce
def insert_initial_tournament_team(apps, schema_editor):
    Team = apps.get_model('main_app', 'Team')
    RegisteredUser = apps.get_model('main_app', 'RegisteredUser')
    UserTeam = apps.get_model('main_app', 'UserTeam')
    
    users = RegisteredUser.objects.all()
    teams = Team.objects.all()

    ut = UserTeam(
        user = users[1],
        team = teams[0]
    )
    ut.save()



"""
    RegisteredUser = apps.get_model('main_app', 'RegisteredUser')
    TournamentType = apps.get_model('main_app', 'TournamentType')
    Tournament = apps.get_model('main_app', 'Tournament')
    UserTournamentModerator = apps.get_model('main_app', 'UserTournamentModerator')
    Team = apps.get_model('main_app', 'Team')
    UserTeam = apps.get_model('main_app', 'UserTeam')
    UserTeamRequest = apps.get_model('main_app', 'UserTeamRequest')
    TournamentMatch = apps.get_model('main_app', 'TournamentMatch')
    TournamentRound = apps.get_model('main_app', 'TournamentRound')
    KnockoutMatch = apps.get_model('main_app', 'KnockoutMatch')
"""

class Migration(migrations.Migration):

    dependencies = [
        ('main_app', '0001_initial'),
    ]

    operations = [ # Zakomentovat při resetu migrací
        migrations.RunPython(insert_initial_user),
        migrations.RunPython(insert_initial_tournament_types),
        migrations.RunPython(insert_initial_tournament),
        migrations.RunPython(insert_initial_tournament_data),
        migrations.RunPython(insert_initial_tournament_team)  # Nutné rozdělit na 2 fce - query se provedou až po skončení fce
    ]
