# Generated by Django 4.1.2 on 2022-10-26 17:45

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='RegisteredUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=64)),
                ('last_name', models.CharField(max_length=64)),
                ('email', models.CharField(max_length=64, unique=True)),
                ('password', models.CharField(max_length=88)),
                ('birth_date', models.DateField(default=datetime.date(1, 1, 1))),
                ('avatar', models.ImageField(default='default.png', upload_to='avatars/')),
                ('description', models.TextField(blank=True)),
                ('join_date', models.DateField(default=datetime.date.today)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.registereduser')),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('description', models.TextField(default='')),
                ('date', models.DateField()),
                ('prize', models.CharField(max_length=64)),
                ('state', models.PositiveSmallIntegerField(choices=[(1, 'Created'), (2, 'Ongoing'), (3, 'Finished')])),
                ('minimum_team_size', models.PositiveIntegerField()),
                ('maximum_team_size', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='TournamentMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.PositiveSmallIntegerField(choices=[(1, 'Not started'), (2, 'Ongoing'), (3, 'Finished')])),
                ('team_1_score', models.PositiveIntegerField()),
                ('team_2_score', models.PositiveIntegerField()),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='TournamentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='UserTournamentModerator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.tournament')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.registereduser')),
            ],
        ),
        migrations.CreateModel(
            name='TournamentRound',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.tournamentmatch')),
                ('team_1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_team_1', to='main_app.team')),
                ('team_2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_team_2', to='main_app.team')),
            ],
        ),
        migrations.AddField(
            model_name='tournament',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.tournamenttype'),
        ),
        migrations.CreateModel(
            name='KnockoutMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.tournamentmatch')),
                ('team_1_match_winner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_team_1_match_winner', to='main_app.tournamentmatch')),
                ('team_2_match_winner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_team_2_match_winner', to='main_app.tournamentmatch')),
            ],
        ),
        migrations.CreateModel(
            name='UserTeamRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.team')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.registereduser')),
            ],
            options={
                'unique_together': {('user', 'team')},
            },
        ),
        migrations.CreateModel(
            name='UserTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.team')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.registereduser')),
            ],
            options={
                'unique_together': {('user', 'team')},
            },
        ),
    ]
